// frontend/src/pages/EventDetailPage.jsx - VERSI√ìN MEJORADA
import React, { useState, useEffect } from 'react';
import { 
  Container, Row, Col, Card, Button, Badge, Alert, 
  Modal, Spinner, Carousel, Tab, Tabs 
} from 'react-bootstrap';
import { useParams, useNavigate } from 'react-router-dom';
import { eventsAPI } from '../services/api';
import { useAuth } from '../context/AuthContext';
import RegistrationForm from '../components/forms/RegistrationForm';

const EventDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { isAuthenticated, user } = useAuth();
  
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showRegistrationModal, setShowRegistrationModal] = useState(false);
  const [registrationSuccess, setRegistrationSuccess] = useState('');
  const [activeTab, setActiveTab] = useState('descripcion');

  useEffect(() => {
    loadEvent();
  }, [id]);

  const loadEvent = async () => {
    try {
      setLoading(true);
      // En desarrollo, usar datos de ejemplo enriquecidos
      const demoEvent = {
        evento_id: parseInt(id),
        nombre: 'Gran Fondo Sierra Nevada',
        descripcion: 'Un desaf√≠o √©pico a trav√©s de los picos m√°s altos de Espa√±a. Esta ruta de monta√±a te llevar√° por paisajes espectaculares, desde verdes valles hasta impresionantes miradores. Perfecta para ciclistas experimentados que buscan superar sus l√≠mites.',
        fecha: '2024-06-15T08:00:00',
        ubicacion: 'Granada, Andaluc√≠a, Espa√±a',
        distancia_km: 120,
        tipo: 'monta√±a',
        estado: 'Pr√≥ximo',
        cuota_inscripcion: 50.00,
        participantes_inscritos: 45,
        cupo_maximo: 100,
        dificultad: 'Alta',
        elevacion: 2500,
        organizador: 'Club Ciclista Granada',
        // Nuevos campos para galer√≠a
        galeria: [
          '/images/events/sierra-nevada-1.jpg',
          '/images/events/sierra-nevada-2.jpg',
          '/images/events/sierra-nevada-3.jpg',
          '/images/events/sierra-nevada-4.jpg'
        ],
        video_presentacion: '/videos/event-highlight-sierra-nevada.mp4',
        kit_bienvenida: {
          incluido: true,
          items: ['Camiseta t√©cnica', 'N√∫mero dorsal', 'Bolsa del corredor', 'Avituallamientos', 'Seguro deportivo']
        },
        requisitos: ['Edad m√≠nima: 18 a√±os', 'Casco obligatorio', 'Bicicleta en buen estado', 'Experiencia en monta√±a recomendada'],
        horarios: {
          registro: '06:00 - 07:30',
          salida: '08:00',
          llegada: '16:00',
          premiacion: '17:00'
        }
      };
      
      setEvent(demoEvent);
    } catch (error) {
      setError('Error cargando evento');
      console.error('Error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRegisterClick = () => {
    if (!isAuthenticated) {
      navigate('/login', { state: { from: `/evento/${id}` } });
      return;
    }
    setShowRegistrationModal(true);
  };

  const handleRegistrationSuccess = (message) => {
    setRegistrationSuccess(message);
    setShowRegistrationModal(false);
    setTimeout(() => {
      setRegistrationSuccess('');
      navigate('/cuenta/inscripciones');
    }, 3000);
  };

  const getStatusVariant = (status) => {
    switch (status) {
      case 'Pr√≥ximo': return 'warning';
      case 'En Curso': return 'success';
      case 'Finalizado': return 'secondary';
      default: return 'secondary';
    }
  };

  const getTypeIcon = (type) => {
    const icons = {
      'ruta': 'üõ£Ô∏è',
      'monta√±a': '‚õ∞Ô∏è',
      'urbano': 'üèôÔ∏è',
      'competitivo': 'üèÜ',
      'recreativo': 'üòä'
    };
    return icons[type] || 'üö¥';
  };

  const getDifficultyBadge = (dificultad) => {
    const config = {
      'baja': { color: 'success', stars: '‚≠ê', label: 'Baja' },
      'media': { color: 'warning', stars: '‚≠ê‚≠ê', label: 'Media' },
      'alta': { color: 'danger', stars: '‚≠ê‚≠ê‚≠ê', label: 'Alta' }
    };
    return config[dificultad?.toLowerCase()] || config.media;
  };

  if (loading) {
    return (
      <Container className="py-4 text-center">
        <Spinner animation="border" role="status" variant="primary">
          <span className="visually-hidden">Cargando evento...</span>
        </Spinner>
        <p className="mt-2">Cargando detalles del evento...</p>
      </Container>
    );
  }

  if (!event) {
    return (
      <Container className="py-4">
        <Alert variant="warning">
          Evento no encontrado
        </Alert>
      </Container>
    );
  }

  const difficulty = getDifficultyBadge(event.dificultad);

  return (
    <Container className="py-4">
      {error && <Alert variant="danger">{error}</Alert>}
      {registrationSuccess && <Alert variant="success">{registrationSuccess}</Alert>}

      <Row>
        <Col lg={8}>
          {/* Galer√≠a de Im√°genes */}
          <Card className="mb-4">
            <EventGallery 
              images={event.galeria} 
              eventName={event.nombre}
              video={event.video_presentacion}
            />
          </Card>

          {/* Informaci√≥n del Evento con Tabs */}
          <Card>
            <Card.Body>
              <Tabs
                activeKey={activeTab}
                onSelect={(tab) => setActiveTab(tab)}
                className="mb-3"
              >
                <Tab eventKey="descripcion" title="üìù Descripci√≥n">
                  <EventDescription event={event} />
                </Tab>
                
                <Tab eventKey="kit" title="üéÅ Kit de Bienvenida">
                  <KitBienvenida kit={event.kit_bienvenida} />
                </Tab>
                
                <Tab eventKey="requisitos" title="‚úÖ Requisitos">
                  <RequisitosEvento requisitos={event.requisitos} />
                </Tab>
                
                <Tab eventKey="horarios" title="üïê Horarios">
                  <HorariosEvento horarios={event.horarios} />
                </Tab>
              </Tabs>
            </Card.Body>
          </Card>
        </Col>

        <Col lg={4}>
          {/* Sidebar de Inscripci√≥n */}
          <Card className="sticky-top" style={{ top: '20px' }}>
            <Card.Header className="bg-primary text-white">
              <h5 className="mb-0">Inscripci√≥n</h5>
            </Card.Header>
            <Card.Body>
              <div className="text-center mb-4">
                <h3 className="text-primary fw-bold">
                  ‚Ç¨{event.cuota_inscripcion || '0.00'}
                </h3>
                <p className="text-muted">Cuota de inscripci√≥n</p>
              </div>

              {/* Badges de Informaci√≥n */}
              <div className="d-flex flex-wrap gap-2 mb-3">
                <Badge bg={getStatusVariant(event.estado)}>
                  {event.estado}
                </Badge>
                <Badge bg={difficulty.color}>
                  {difficulty.stars} {difficulty.label}
                </Badge>
                <Badge bg="info">
                  {getTypeIcon(event.tipo)} {event.tipo}
                </Badge>
              </div>

              {/* Estad√≠sticas R√°pidas */}
              <div className="event-stats-small mb-3">
                <div className="d-flex justify-content-between mb-2">
                  <span className="text-muted">Distancia:</span>
                  <strong>{event.distancia_km} km</strong>
                </div>
                <div className="d-flex justify-content-between mb-2">
                  <span className="text-muted">Elevaci√≥n:</span>
                  <strong>{event.elevacion} m</strong>
                </div>
                <div className="d-flex justify-content-between">
                  <span className="text-muted">Inscritos:</span>
                  <strong>{event.participantes_inscritos}/{event.cupo_maximo}</strong>
                </div>
              </div>

              {event.estado === 'Finalizado' ? (
                <Button variant="secondary" size="lg" className="w-100" disabled>
                  Evento Finalizado
                </Button>
              ) : (
                <Button 
                  variant="primary" 
                  size="lg" 
                  className="w-100"
                  onClick={handleRegisterClick}
                >
                  {isAuthenticated ? 'Inscribirse' : 'Iniciar Sesi√≥n para Inscribirse'}
                </Button>
              )}

              {/* Informaci√≥n Adicional */}
              <div className="mt-3 text-center">
                <small className="text-muted d-block">
                  üìç {event.ubicacion}
                </small>
                <small className="text-muted">
                  üóìÔ∏è {new Date(event.fecha).toLocaleDateString('es-ES', {
                    weekday: 'long',
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </small>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Modal de Inscripci√≥n */}
      <Modal 
        show={showRegistrationModal} 
        onHide={() => setShowRegistrationModal(false)}
        size="lg"
      >
        <Modal.Header closeButton>
          <Modal.Title>Inscripci√≥n al Evento</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <RegistrationForm
            event={event}
            onSuccess={handleRegistrationSuccess}
            onCancel={() => setShowRegistrationModal(false)}
          />
        </Modal.Body>
      </Modal>
    </Container>
  );
};

// Componente de Galer√≠a con Video
const EventGallery = ({ images, eventName, video }) => {
  const [activeIndex, setActiveIndex] = useState(0);

  return (
    <div className="event-gallery">
      <Carousel 
        activeIndex={activeIndex} 
        onSelect={setActiveIndex}
        interval={null}
        indicators
        controls
      >
        {/* Video de Presentaci√≥n */}
        {video && (
          <Carousel.Item>
            <div className="video-container">
              <video
                controls
                className="event-video"
                poster="/images/events/video-poster.jpg"
              >
                <source src={video} type="video/mp4" />
                Tu navegador no soporta el elemento video.
              </video>
              <div className="carousel-caption">
                <Badge bg="primary">Video Presentaci√≥n</Badge>
              </div>
            </div>
          </Carousel.Item>
        )}
        
        {/* Im√°genes de la Galer√≠a */}
        {images?.map((image, index) => (
          <Carousel.Item key={index}>
            <div 
              className="gallery-image"
              style={{
                backgroundImage: `url(${image})`,
                height: '400px',
                backgroundSize: 'cover',
                backgroundPosition: 'center'
              }}
            />
            <div className="carousel-caption">
              <Badge bg="dark">{index + 1}/{images.length}</Badge>
            </div>
          </Carousel.Item>
        ))}
      </Carousel>
      
      {/* Miniaturas */}
      <div className="gallery-thumbnails mt-3">
        <div className="d-flex gap-2 overflow-auto">
          {video && (
            <div 
              className={`thumbnail ${activeIndex === 0 ? 'active' : ''}`}
              onClick={() => setActiveIndex(0)}
            >
              <div className="thumbnail-video">
                <span>üé¨</span>
              </div>
            </div>
          )}
          {images?.map((image, index) => (
            <div 
              key={index}
              className={`thumbnail ${activeIndex === (video ? index + 1 : index) ? 'active' : ''}`}
              onClick={() => setActiveIndex(video ? index + 1 : index)}
              style={{
                backgroundImage: `url(${image})`,
                minWidth: '80px',
                height: '60px',
                backgroundSize: 'cover',
                backgroundPosition: 'center'
              }}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

// Componente de Descripci√≥n Mejorada
const EventDescription = ({ event }) => (
  <div>
    <h4 className="mb-3">Sobre este Evento</h4>
    <p className="mb-4">{event.descripcion}</p>
    
    <Row className="g-3">
      <Col md={6}>
        <h6>üö¥ Tipo de Ciclismo</h6>
        <p className="text-muted">{event.tipo}</p>
      </Col>
      <Col md={6}>
        <h6>üìè Distancia Total</h6>
        <p className="text-muted">{event.distancia_km} kil√≥metros</p>
      </Col>
      <Col md={6}>
        <h6>‚õ∞Ô∏è Elevaci√≥n</h6>
        <p className="text-muted">{event.elevacion} metros de desnivel</p>
      </Col>
      <Col md={6}>
        <h6>üë§ Organizador</h6>
        <p className="text-muted">{event.organizador}</p>
      </Col>
    </Row>
  </div>
);

// Componente de Kit de Bienvenida
const KitBienvenida = ({ kit }) => (
  <div>
    <h4 className="mb-3">üéÅ Kit de Bienvenida</h4>
    {kit?.incluido ? (
      <>
        <p className="text-success mb-3">
          <strong>‚úÖ Kit incluido en la inscripci√≥n</strong>
        </p>
        <ul className="list-unstyled">
          {kit.items?.map((item, index) => (
            <li key={index} className="mb-2">
              <span className="me-2">üéØ</span>
              {item}
            </li>
          ))}
        </ul>
      </>
    ) : (
      <p className="text-muted">Este evento no incluye kit de bienvenida.</p>
    )}
  </div>
);

// Componente de Requisitos
const RequisitosEvento = ({ requisitos }) => (
  <div>
    <h4 className="mb-3">‚úÖ Requisitos de Participaci√≥n</h4>
    <ul className="list-unstyled">
      {requisitos?.map((requisito, index) => (
        <li key={index} className="mb-2">
          <span className="me-2">üìã</span>
          {requisito}
        </li>
      ))}
    </ul>
  </div>
);

// Componente de Horarios
const HorariosEvento = ({ horarios }) => (
  <div>
    <h4 className="mb-3">üïê Horarios del Evento</h4>
    <div className="row g-3">
      <div className="col-md-6">
        <strong>Registro:</strong>
        <p className="text-muted mb-0">{horarios?.registro}</p>
      </div>
      <div className="col-md-6">
        <strong>Salida:</strong>
        <p className="text-muted mb-0">{horarios?.salida}</p>
      </div>
      <div className="col-md-6">
        <strong>Llegada estimada:</strong>
        <p className="text-muted mb-0">{horarios?.llegada}</p>
      </div>
      <div className="col-md-6">
        <strong>Premiaci√≥n:</strong>
        <p className="text-muted mb-0">{horarios?.premiacion}</p>
      </div>
    </div>
  </div>
);

export default EventDetailPage;